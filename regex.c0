#use <conio>
#use <string>

/*
    Walmart version of a regex matcher. Only supports the following regex:
        - character classes (e.g. '[a-zA-Z0-9_]', '[^a-z]')
        - choice '|'
        - match any '.'
        - match one or more '+'
        - match any times '*'
        - optional '?'
        - shorthands '\d', '\D', '\w', '\W', '\s', '\S'
    (TODO: do the "match m-n occurences" thing)

    Some notes:
        - shorthands and escaped characters should be typed with two backslashes
        like: '\\d', '\\?' (one backslash isn't valid C0 syntax for character
        literals)
        - special characters such as '\t', '\n' and '\r' uses one backslash (as
        C0 supports them)
        - all quantifiers are greedy
        - everything only works on ASCII inputs
        - capturing group also doesn't exist (parentheses are used for operator
        precedence only)
*/

struct re_state_t;

struct re_edge_t {
    bool is_epsilon;
    struct re_state_t *target;
    bool[] bucket_set;
};
typedef struct re_edge_t re_edge_t;

struct re_state_t {
    int state_id;
    bool is_term_state;
    int n_edges;
    re_edge_t[] edges;
};
typedef struct re_state_t re_state_t;

struct re_regex_t {
    int n_states;
    re_state_t *head;
};
typedef struct re_regex_t re_regex_t;

bool re_parse_or(string regex, int *pc, re_state_t *s, re_state_t *e, int *ctx);
bool re_parse_seq(string regex, int *pc, re_state_t *s, re_state_t *e, int *ctx);
bool re_parse_term(string regex, int *pc, re_state_t *s, re_state_t *e, int *ctx);
bool re_parse_atom(string regex, int *pc, re_state_t *s, re_state_t *e, int *ctx);

re_state_t *re_new_state(int *ctx, bool is_term_state) {
    re_state_t *state = alloc(re_state_t);
    state->state_id = *ctx;
    (*ctx)++;
    state->is_term_state = is_term_state;
    state->n_edges = 0;
    state->edges = alloc_array(re_edge_t, 64);

    return state;
}

bool re_is_sep_char(string regex, int *pc)
//@requires *pc <= string_length(regex);
{
    if (*pc == string_length(regex)) return true;

    char peek = string_charat(regex, *pc);
    return peek == ')' || peek == '|';
}

bool re_consume(char expect, string regex, int *pc)
//@requires *pc <= string_length(regex);
{
    // explicit check for more explicit error message (thus the loose @requires)
    if (*pc == string_length(regex)) {
        println("Regex Syntax Error: unexpected end of input");
        return false;
    }

    char peek = string_charat(regex, *pc);
    bool match = peek == expect;
    if (match) (*pc)++;
    else {
        print("Regex Syntax Error: unexpected character '");
        printchar(peek);
        print("', expecting '");
        printchar(expect);
        println("'");
    }
    return match;
}

void re_add_epsilon(re_state_t *s, re_state_t *e) {
    s->edges[s->n_edges].is_epsilon = true;
    s->edges[s->n_edges].target = e;
    s->n_edges++;
}

bool re_parse_atom(string regex, int *pc, re_state_t *s, re_state_t *e, int *ctx)
//@requires *pc < string_length(regex);
{
    char peek = string_charat(regex, *pc);
    if (peek == '(') {
        (*pc)++;
        if (!re_parse_or(regex, pc, s, e, ctx)) return false;
        if (!re_consume(')', regex, pc)) return false;
    } else if (peek == '[') {
        // TODO: do the class thingy
    } else if (peek == '?' || peek == '+' || peek == '*') {
        println("Regex Syntax Error: misplaced '?', '*' or '+'");
        return false;
    } else {
        (*pc)++;
        if (peek == '\\') {
            peek = string_charat(regex, *pc);
            // TODO: add special characters such as '\d', ''
            if (
                peek != '+' && peek != '.' && peek != '*' &&
                peek != '?' && peek != '|' && peek != '\\' &&
                peek != '(' && peek != ')' && peek != '[' &&
                peek != ']'
            ) {
                print("Regex Syntax Error: invalid escaped char '\\");
                printchar(peek);
                println("'");
                return false;
            }
            (*pc)++;
        }

        s->edges[s->n_edges].bucket_set = alloc_array(bool, 128);
        s->edges[s->n_edges].bucket_set[char_ord(peek)] = true;
        s->edges[s->n_edges].target = e;
        s->n_edges++;
    }

    return true;
}

// term := group | group postfix
bool re_parse_term(string regex, int *pc, re_state_t *s, re_state_t *e, int *ctx)
//@requires *pc < string_length(regex);
{
    // in case of '+', the same edge needs to be generated twice
    int pc_store = *pc;
    if (!re_parse_atom(regex, pc, s, e, ctx)) return false;

    if (*pc == string_length(regex)) return true;
    char peek = string_charat(regex, *pc);
    if (peek == '?') {
        re_add_epsilon(s, e);
        (*pc)++;
    } else if (peek == '+') {
        *pc = pc_store;
        if (!re_parse_atom(regex, pc, e, e, ctx)) return false;
        (*pc)++;
    } else if (peek == '*') {
        *pc = pc_store;
        if (!re_parse_atom(regex, pc, e, e, ctx)) return false;
        re_add_epsilon(s, e);
        (*pc)++;
    }

    return true;
}

// seq := term | term seq | ''
bool re_parse_seq(string regex, int *pc, re_state_t *s, re_state_t *e, int *ctx)
//@requires *pc <= string_length(regex);
{
    if (re_is_sep_char(regex, pc)) {
        re_add_epsilon(s, e);
        return true;
    }
    
    // ugly backtracking to eliminate one unnecessary epsilon transition
    int pc_store = *pc;
    int *dummy_ctx = alloc(int);
    re_state_t *dummy_s = re_new_state(dummy_ctx, false);
    re_state_t *dummy_e = re_new_state(dummy_ctx, false);
    if (!re_parse_term(regex, pc, dummy_s, dummy_e, dummy_ctx)) return false;

    if (re_is_sep_char(regex, pc)) {
        *pc = pc_store;
        return re_parse_term(regex, pc, s, e, ctx);
    } else {
        *pc = pc_store;
        re_state_t *next = re_new_state(ctx, false);
        return re_parse_term(regex, pc, s, next, ctx)
            && re_parse_seq(regex, pc, next, e, ctx);
    }
}

// or := seq | seq '|' or
bool re_parse_or(string regex, int *pc, re_state_t *s, re_state_t *e, int *ctx)
//@requires *pc <= string_length(regex);
{
    if (!re_parse_seq(regex, pc, s, e, ctx)) return false;
    while (*pc < string_length(regex) && string_charat(regex, *pc) == '|') {
        (*pc)++;
        if (!re_parse_seq(regex, pc, s, e, ctx)) return false;
    }

    return true;
}

re_regex_t *re_parse_regex(string regex) {
    int *pc = alloc(int); // pointer into string 'regex'
    int *state_context = alloc(int); // for assigning state ID
    re_state_t *start = re_new_state(state_context, false);
    re_state_t *end = re_new_state(state_context, true);

    if (!re_parse_or(regex, pc, start, end, state_context)) {
        return NULL;
    }

    if (*pc != string_length(regex)) {
        print("Regex Syntax Error: parse ended at char ");
        printint(*pc);
        printchar('\n');
        return NULL;
    }

    re_regex_t *dfa = alloc(re_regex_t);
    dfa->n_states = *state_context;
    dfa->head = start;

    return dfa;
}

void re_print_state(re_state_t *state, bool[] visited) {
    if (visited[state->state_id]) return;
    visited[state->state_id] = true;

    print("State ");
    printint(state->state_id);
    println("");

    for (int i = 0; i < state->n_edges; i++) {
        re_print_state(state->edges[i].target, visited);
    }
}

void re_print_dfa(re_regex_t *re) {
    bool[] visited = alloc_array(bool, re->n_states);
    re_print_state(re->head, visited);
}

int main() {
    re_regex_t *re = re_parse_regex("abc|def");
    print("Parse successful: ");
    printbool(re != NULL);
    printchar('\n');
    re_print_dfa(re);

    return 69;
}
