#use <conio>
#use <string>
#use <util>

/*
    This file contains a ordered map implemented with red-black tree.
*/

typedef int key_cmp_t(void *a, void *b);

struct om_node_t {
    void *key;
    void *value;

    struct om_node_t *left;
    struct om_node_t *right;
    struct om_node_t *parent;

    bool is_red; // false = black; true = red
};
typedef struct om_node_t om_node_t;

struct om_map_t {
    int size;
    om_node_t *root;

    key_cmp_t *cmp_func;
    bool allow_repeat;
};
typedef struct om_map_t om_map_t;

// END `om_node_t` definitions

// BEGIN contract functions

/*
    Sanity check for checking that the children of a node has parent pointing
    to the node.
 */
bool __om_fully_connected(om_node_t *node, om_node_t *parent) {
    if (node == NULL) return true;
    if (node->parent != parent) return false;
    return __om_fully_connected(node->left, node)
        || __om_fully_connected(node->right, node);
}

/*
    In order to bypass pureness restriction of contract functions:
    - returns -1 if there exists non-matching height in descendents
    - returns black height (n >= 0) if subtrees are valid
 */
int __om_valid_node_height(om_node_t *node) {
    if (node == NULL) {
        return 1;
    }

    int l_height = __om_valid_node_height(node->left);
    int r_height = __om_valid_node_height(node->right);

    if (l_height == -1 || r_height == -1) {
        return -1;
    }

    if (l_height != r_height) return -1;

    return node->is_red ? l_height : l_height + 1;
}

bool __om_no_consecutive_red(om_node_t *node, bool is_parent_red) {
    if (node == NULL) return true;
    if (node->is_red && is_parent_red) return false;
    return __om_no_consecutive_red(node->left, node->is_red)
        && __om_no_consecutive_red(node->right, node->is_red);
}

bool __om_is_valid_tree(om_map_t *tree)
{
    if (tree == NULL) return false;

    // empty tree is fine
    if (tree->root == NULL) return true;
    
    // root is black
    if (tree->root->is_red) return false;
    
    // no consecutive red nodes && equal-size black path
    return __om_fully_connected(tree->root, NULL)
        && __om_no_consecutive_red(tree->root, false)
        && __om_valid_node_height(tree->root) != -1;
}

// END contract functions

// BEGIN forward declarations

void om_print_int_kv_pair(om_node_t *kv);

// END forward declarations

// BEGIN utilities functions

om_node_t *__om_get_uncle(om_node_t *node)
//@requires node != NULL;
//@requires node->parent != NULL;
//@requires node->parent->parent != NULL;
{
    om_node_t *parent = node->parent;
    om_node_t *grand = parent->parent;
    return grand->left == parent ? grand->right : grand->left;
}

om_node_t *__om_get_sibling(om_node_t *node)
//@requires node != NULL;
//@requires node->parent != NULL;
{
    om_node_t *parent = node->parent;
    return parent->left == node ? parent->right : parent->left;
}

// END utilities functions

// BEGIN com_func

int int_ptr_compare(void *a, void *b)
//@requires a != NULL && b != NULL;
{
    int x = * (int *) a;
    int y = * (int *) b;

    if (x < y) return -1;
    if (x > y) return 1;
    return 0;
}

int string_ptr_compare(void *a, void *b)
//@requires a != NULL && b != NULL;
{
    string x = * (string *) a;
    string y = * (string *) b;

    return string_compare(x, y);
}

// END com_func

// BEGIN constructor

om_map_t *om_create_map(key_cmp_t *func)
//@ensures __om_is_valid_tree(\result);
{
    om_map_t *map = alloc(om_map_t);
    map->size = 0;
    map->root = NULL;
    map->cmp_func = func;
    map->allow_repeat = false;
    return map;
}

om_map_t *om_create_bst(key_cmp_t *func)
//@ensures __om_is_valid_tree(\result);
{
    om_map_t *map = alloc(om_map_t);

    map->size = 0;
    map->root = NULL;
    map->cmp_func = func;
    map->allow_repeat = true;
    return map;
}

// END constructor

// BEGIN rotations

void __om_left_rotate(om_map_t *tree, om_node_t *node)
//@requires node->right != NULL;
{
    om_node_t *right = node->right;
    node->right = right->left;
    if (node->right != NULL) node->right->parent = node;

    right->parent = node->parent;

    if (node->parent == NULL) tree->root = right;
    else if (node->parent->left == node) node->parent->left = right;
    else node->parent->right = right;

    node->parent = right;
    right->left = node;
}

void __om_right_rotate(om_map_t *tree, om_node_t *node)
//@requires node->left != NULL;
{
    om_node_t *left = node->left;
    node->left = left->right;
    if (node->left != NULL) node->left->parent = node;

    left->parent = node->parent;

    if (node->parent == NULL) tree->root = left;
    else if (node->parent->left == node) node->parent->left = left;
    else node->parent->right = left;

    node->parent = left;
    left->right = node;
}

// END rotations

// BEGIN lookup

om_node_t *__om_get_leftmost(om_node_t *root)
//@requires root != NULL;
//@ensures \result != NULL;
{
    while (root->left != NULL) {
        root = root->left;
    }

    return root;
}

om_node_t *__om_get_rightmost(om_node_t *root)
//@requires root != NULL;
//@ensures \result != NULL;
{
    while (root->right != NULL) {
        root = root->right;
    }

    return root;
}

om_node_t *__om_find_node(om_map_t *tree, om_node_t *node, void *key)
//@requires __om_is_valid_tree(tree);
{
    while (node != NULL) {
        int cmp = (*tree->cmp_func)(key, node->key);
        if (cmp == 0) return node;
        else if (cmp < 0) node = node->left;
        else node = node->right;
    }

    return NULL;
}

bool __om_has_key(om_map_t *tree, void *key)
//@requires __om_is_valid_tree(tree);
{
    return __om_find_node(tree, tree->root, key) != NULL;
}

// END lookup

// BEGIN insert

// https://www.geeksforgeeks.org/insertion-in-red-black-tree/
void __om_recolor_or_rotate(om_map_t *tree, om_node_t *node) {
    while (node->parent != NULL && node->parent->is_red) {
        om_node_t *parent = node->parent;
        om_node_t *grand = parent->parent;
        //@assert grand != NULL; // since a red node cannot be root node
        //@assert parent == grand->left || parent == grand->right;

        om_node_t *uncle = __om_get_uncle(node);
        if (uncle != NULL && uncle->is_red) {
            /*
                - change parent and uncle to black
                - repeat `__om_recolor_or_rotate` on grandfather
            */
            parent->is_red = false;
            uncle->is_red = false;
            grand->is_red = true;
            node = grand;
        } else {
            /*
                four possible cases:
                - LL rotation
                - LR rotation
                - RR rotation
                - RL rotation
            */

            if (node == parent->left && parent == grand->left) {
                // LL case
                __om_right_rotate(tree, grand);
                bool parent_red = parent->is_red;
                parent->is_red = grand->is_red;
                grand->is_red = parent_red;

            } else if (node == parent->right && parent == grand->left) {
                // LR case
                __om_left_rotate(tree, parent);
                __om_right_rotate(tree, grand);
                bool grand_red = grand->is_red;
                grand->is_red = node->is_red;
                node->is_red = grand_red;

            } else if (node == parent->right && parent == grand->right) {
                // RR case
                __om_left_rotate(tree, grand);
                bool grand_red = grand->is_red;
                grand->is_red = parent->is_red;
                parent->is_red = grand_red;

            } else if (node == parent->left && parent == grand->right) {
                // RL case
                __om_right_rotate(tree, parent);
                __om_left_rotate(tree, grand);
                bool grand_red = grand->is_red;
                grand->is_red = node->is_red;
                node->is_red = grand_red;
            } else {
                // SHOULD BE UNREACHABLE.
                error("oops");
            }
        }
    }

    tree->root->is_red = false;
}

void __om_insert_kv_pair(om_map_t *tree, void *key, void *value)
//@requires __om_is_valid_tree(tree);
//@ensures __om_is_valid_tree(tree);
{
    om_node_t *new_node = alloc(om_node_t);
    new_node->is_red = true;
    new_node->key = key;
    new_node->value = value;
    
    if (tree->root == NULL) {
        new_node->is_red = false;
        tree->root = new_node;
        tree->size++;
    } else {
        om_node_t *parent = NULL;
        om_node_t *curr = tree->root;
        bool last_branch_is_left = false;
        while (curr != NULL) {
            parent = curr;
            int cmp = (*tree->cmp_func)(key, curr->key);
            if (cmp == 0 && !tree->allow_repeat) {
                curr->value = value;
                return;
            } else if (cmp < 0) {
                curr = curr->left;
                last_branch_is_left = true;
            } else {
                curr = curr->right;
                last_branch_is_left = false;
            }
        }

        if (last_branch_is_left) parent->left = new_node;
        else parent->right = new_node;
        new_node->parent = parent;
        tree->size++;

        __om_recolor_or_rotate(tree, new_node);
    }
}

// END insert

// BEGIN remove

om_node_t *__om_del_find_replace(om_node_t *node)
//@requires node != NULL;
{
    if (node->left == NULL && node->right == NULL) {
        return NULL;
    } else if (node->left == NULL || node->right == NULL) {
        return node->left != NULL ? node->left : node->right;
    } else {
        return __om_get_leftmost(node->right);
    }
}

void __om_reduce_double_black(om_map_t *tree, om_node_t *node) {
    // only used in the loop guard to test for continuation
    om_node_t *flag = node;
    while (flag != NULL && flag != tree->root) {
        // default: stop after this iteration
        node = flag;
        flag = NULL;

        //@assert node->parent != NULL;
        om_node_t *parent = node->parent;
        om_node_t *sibling = __om_get_sibling(node);
        
        if (sibling == NULL) {
            flag = parent;
        } else {
            if (sibling->is_red) {
                parent->is_red = true;
                sibling->is_red = false;

                if (parent->left == sibling) __om_right_rotate(tree, parent);
                else __om_left_rotate(tree, parent);

                flag = node;
            } else {
                if (sibling->left != NULL && sibling->left->is_red) {
                    // left children is red

                    if (sibling == parent->left) {
                        // LL case

                        sibling->left->is_red = sibling->is_red;
                        sibling->is_red = parent->is_red;
                        __om_right_rotate(tree, parent);
                    } else {
                        // RL case

                        sibling->left->is_red = parent->is_red;
                        __om_right_rotate(tree, sibling);
                        __om_left_rotate(tree, parent);
                    }

                    parent->is_red = false;

                } else if (sibling->right != NULL && sibling->right->is_red) {
                    // right children is red

                    if (sibling == parent->left) {
                        // LR case

                        sibling->right->is_red = parent->is_red;
                        __om_left_rotate(tree, sibling);
                        __om_right_rotate(tree, parent);
                    } else {
                        // RR case

                        sibling->right->is_red = sibling->is_red;
                        sibling->is_red = parent->is_red;
                        __om_left_rotate(tree, parent);
                    }

                    parent->is_red = false;

                } else {
                    // both children are black

                    sibling->is_red = true;
                    if (parent->is_red) parent->is_red = false;
                    else flag = parent;
                }
            }
        }
    }
}

// https://www.geeksforgeeks.org/deletion-in-red-black-tree/
void __om_delete_node(om_map_t *tree, om_node_t *v)
//@requires __om_is_valid_tree(tree);
//@ensures __om_is_valid_tree(tree);
{
    om_node_t *u = __om_del_find_replace(v);
    bool both_black = (u == NULL || !u->is_red) && !v->is_red;

    if (v->left == NULL && v->right == NULL) {
        // deleting a leaf node

        //@assert u == NULL;
        if (v == tree->root) {
            //@assert tree->size == 1;

            tree->root = NULL;
            tree->size--;
        } else {
            if (both_black) {
                __om_reduce_double_black(tree, v);
            } else {
                // make sibling red
                om_node_t *sibling = __om_get_sibling(v);
                if (sibling != NULL) sibling->is_red = true;
            }

            // delete `v`
            //@assert v->parent != NULL;
            if (v->parent->left == v) v->parent->left = NULL;
            else v ->parent->right = NULL;
            tree->size--;
        }

    } else if (v->left == NULL || v->right == NULL) {
        // deleting a node with one children

        if (v == tree->root) {
            //@assert tree->size == 2;

            v->key = u->key;
            v->value = u->value;
            v->left = NULL;
            v->right = NULL;
            tree->size--;
        } else {
            // remove `v` and replace it with `u`
            u->parent = v->parent;
            if (v->parent->left == v) v->parent->left = u;
            else v->parent->right = u;
            tree->size--;

            if (both_black) {
                __om_reduce_double_black(tree, u);
            } else {
                //@assert u->is_red || v->is_red;
                u->is_red = false;
            }
        }

    } else {
        // internal node

        //@assert v->left != NULL && v->right != NULL;
        void *temp_key = v->key;
        void *temp_value = v->value;
        v->key = u->key;
        v->value = u->value;
        u->key = temp_key;
        u->value = temp_value;

        // recursion is fine here; as it would be at most two calls deep
        __om_delete_node(tree, u);
    }
}

/*
    Removes a key from the map and return true if the key exists and is deleted,
    false otherwise.
*/
bool __om_delete_key(om_map_t *tree, void *key)
//@requires __om_is_valid_tree(tree);
//@ensures __om_is_valid_tree(tree);
{
    om_node_t *node = __om_find_node(tree, tree->root, key);
    if (node == NULL) return false;

    __om_delete_node(tree, node);
    return true;
}

// END remove

// BEGIN misc

int __om_max_depth(om_node_t *node) {
    if (node == NULL) return 0;
    return max(__om_max_depth(node->left), __om_max_depth(node->right)) + 1;
}

// END misc

// BEGIN debug

void om_print_int_kv_pair(om_node_t *kv) {
    printf("(%c) [", kv->is_red ? 'r' : 'b');
    printint(* (int *) kv->key);
    printf("] %d\n", * (int *) kv->value);
}

void om_print_map_preorder(om_node_t *node) {
    if (node == NULL) return;

    om_print_int_kv_pair(node);
    om_print_map_preorder(node->left);
    om_print_map_preorder(node->right);
}

void om_print_map_inorder(om_node_t *node) {
    if (node == NULL) return;

    om_print_map_preorder(node->left);
    om_print_int_kv_pair(node);
    om_print_map_preorder(node->right);
}

void om_print_map_postorder(om_node_t *node) {
    if (node == NULL) return;

    om_print_map_preorder(node->left);
    om_print_map_preorder(node->right);
    om_print_int_kv_pair(node);
}

void om_print_map(om_map_t *tree)
//@requires __om_is_valid_tree(tree);
{
    print("Map Size: ");
    printint(tree->size);
    println("");

    println("Pre Order:");
    om_print_map_preorder(tree->root);

    println("In Order:");
    om_print_map_inorder(tree->root);

    println("Post Order:");
    om_print_map_postorder(tree->root);
}

// END debug

// BEGIN size

int om_size(om_map_t *tree)
//@requires __om_is_valid_tree(tree);
{
    return tree->size;
}

bool om_empty(om_map_t *tree)
//@requires __om_is_valid_tree(tree);
{
    return tree->size == 0;
}

// END size

// BEGIN queue shorthand

void om_push_i(om_map_t *tree, int key)
//@requires __om_is_valid_tree(tree);
//@ensures __om_is_valid_tree(tree);
{
    int *key_ptr = alloc(int);
    *key_ptr = key;
    __om_insert_kv_pair(tree, (void *) key_ptr, (void *) key_ptr);
}

int om_pop_min_i(om_map_t *tree)
//@requires __om_is_valid_tree(tree);
//@requires !om_empty(tree);
//@ensures __om_is_valid_tree(tree);
{
    om_node_t *min = __om_get_leftmost(tree->root);
    __om_delete_node(tree, min);
    return * (int *) min->value;
}

int om_pop_max_i(om_map_t *tree)
//@requires __om_is_valid_tree(tree);
//@requires !om_empty(tree);
//@ensures __om_is_valid_tree(tree);
{
    om_node_t *max = __om_get_rightmost(tree->root);
    __om_delete_node(tree, max);
    return * (int *) max->value;
}

int om_peek_min_i(om_map_t *tree)
//@requires __om_is_valid_tree(tree);
//@requires !om_empty(tree);
{
    om_node_t *min = __om_get_leftmost(tree->root);
    return * (int *) min->value;
}

int om_peek_max_i(om_map_t *tree)
//@requires __om_is_valid_tree(tree);
//@requires !om_empty(tree);
{
    om_node_t *max = __om_get_rightmost(tree->root);
    return * (int *) max->value;
}

bool om_contains_i(om_map_t *tree, int value)
//@requires __om_is_valid_tree(tree);
{
    int *ptr = alloc(int);
    *ptr = value;
    return __om_find_node(tree, tree->root, (void *) ptr) != NULL;
}

// END queue shorthand

// BEGIN map shorthand

void om_insert_si(om_map_t *tree, string key, int value)
//@requires __om_is_valid_tree(tree);
//@ensures __om_is_valid_tree(tree);
{
    string *k_ptr = alloc(string);
    *k_ptr = key;

    int *v_ptr = alloc(int);
    *v_ptr = value;

    __om_insert_kv_pair(tree, (void *) k_ptr, (void *) v_ptr);
}

void om_insert_ii(om_map_t *tree, int key, int value)
//@requires __om_is_valid_tree(tree);
//@ensures __om_is_valid_tree(tree);
{
    int *k_ptr = alloc(int);
    *k_ptr = key;

    int *v_ptr = alloc(int);
    *v_ptr = value;

    __om_insert_kv_pair(tree, (void *) k_ptr, (void *) v_ptr);
}

int om_get_si(om_map_t *tree, string key)
//@requires __om_is_valid_tree(tree);
//@ensures __om_is_valid_tree(tree);
{
    string *k_ptr = alloc(string);
    *k_ptr = key;
    return * (int *) __om_find_node(tree, tree->root, (void *) k_ptr)->value;
}

int om_get_ii(om_map_t *tree, int key)
//@requires __om_is_valid_tree(tree);
//@ensures __om_is_valid_tree(tree);
{
    int *ptr = alloc(int);
    *ptr = key;
    return * (int *) __om_find_node(tree, tree->root, (void *) ptr)->value;
}

bool om_has_s(om_map_t *tree, string value)
//@requires __om_is_valid_tree(tree);
{
    string *ptr = alloc(string);
    *ptr = value;
    return __om_has_key(tree, (void *) ptr);
}

bool om_has_i(om_map_t *tree, int value)
//@requires __om_is_valid_tree(tree);
{
    int *ptr = alloc(int);
    *ptr = value;
    return __om_has_key(tree, (void *) ptr);
}

bool om_delete_s(om_map_t *tree, string value)
//@requires __om_is_valid_tree(tree);
{
    string *ptr = alloc(string);
    *ptr = value;
    return __om_delete_key(tree, (void *) ptr);
}

bool om_delete_i(om_map_t *tree, int value)
//@requires __om_is_valid_tree(tree);
{
    int *ptr = alloc(int);
    *ptr = value;
    return __om_delete_key(tree, (void *) ptr);
}

// END map shorthand

int main() {
    om_map_t *tree = om_create_bst(&int_ptr_compare);

    // om_push_i(tree, 15);
    // om_push_i(tree, 8);
    // om_push_i(tree, 20);
    // om_push_i(tree, 4);
    // om_push_i(tree, 12);
    // om_push_i(tree, 18);
    // om_push_i(tree, 25);
    // om_push_i(tree, 2);
    // om_push_i(tree, 6);
    // om_push_i(tree, 10);
    // om_push_i(tree, 14);
    // om_push_i(tree, 16);
    // om_push_i(tree, 22);
    // om_push_i(tree, 28);
    // om_push_i(tree, 1);
    // om_push_i(tree, 5);
    // om_push_i(tree, 9);
    // om_push_i(tree, 13);
    // om_push_i(tree, 19);
    // om_push_i(tree, 24);

    for (int i = 0; i < 1000000; i++) {
        om_push_i(tree, i);
        if (i % 10000 == 0) printf("%d\n", i);
    }

    printf("Depth: %d\n", __om_max_depth(tree->root));

    //om_print_map(map);
    // printf("Side: %d\n", tree->size);
    // while (!om_empty(tree)) {
    //     printf("%d\n", om_pop_min_i(tree));
    // }

    return 0;
}
