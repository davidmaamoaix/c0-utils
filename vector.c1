#use <conio>
#use <string>

/*
    A vector for integers.
 */


struct vec_t {
    int len;
    int limit;
    void *[] data;
};
typedef struct vec_t vec_t;

// BEGIN contracts

bool v_is_vector(vec_t *vec) {
    return vec != NULL && vec->len >= 0
        && vec->limit >= 0 && vec->len < vec->limit;
}

// END contracts

// BEGIN constructor

vec_t *v_create_vector()
//@ensures v_is_vector(\result);
{
    vec_t *vec = alloc(vec_t);
    vec->len = 0;
    vec->limit = 16;
    vec->data = alloc_array(void *, vec->limit);

    return vec;
}

// END constructor

// BEGIN helpers

void __v_resize(vec_t *vec)
//@requires vec != NULL;
//@requires vec->len >= 0 && vec->limit >= 0 && vec->len <= vec->limit;
//@ensures v_is_vector(vec);
{
    if (vec->len == vec->limit) {
        vec->limit <<= 1;
        void *[] new = alloc_array(void *, vec->limit);
        for (int i = 0; i < vec->len; i++) {
            new[i] = vec->data[i];
        }

        vec->data = new;
    }
}

// END helpers

// BEGIN interface

int v_length(vec_t *vec)
//@requires v_is_vector(vec);
//@ensures \result == vec->len;
{
    return vec->len;
}

void *v_get(vec_t *vec, int i)
//@requires v_is_vector(vec);
//@requires 0 <= i && i < vec->len;
//@ensures \result == vec->data[i];
{
    return vec->data[i];
}

void v_set(vec_t *vec, int i, void *v)
//@requires v_is_vector(vec);
//@requires 0 <= i && i < v_length(vec);
//@ensures v == vec->data[i];
{
    vec->data[i] = v;
}

void v_append(vec_t *vec, void *v)
//@requires v_is_vector(vec);
{
    vec->data[vec->len] = v;
    vec->len++;
    __v_resize(vec);
}

void *v_remove_last(vec_t *vec)
//@requires v_is_vector(vec);
//@requires 0 < v_length(vec);
{
    vec->len--;
    return vec->data[vec->len + 1];
}

// END interface

// BEGIN shorthands

int v_get_int(vec_t *vec, int i)
//@requires v_is_vector(vec);
//@requires 0 <= i && i < vec->len;
//@ensures \result == * (int *) vec->data[i];
{
    return * (int *) v_get(vec, i);
}

void v_set_int(vec_t *vec, int i, int v)
//@requires v_is_vector(vec);
//@requires 0 <= i && i < v_length(vec);
//@ensures v == * (int *) vec->data[i];
{
    int *v_ptr = alloc(int);
    *v_ptr = v;
    vec->data[i] = (void *) v_ptr;
}

void v_append_int(vec_t *vec, int v)
//@requires v_is_vector(vec);
{
    int *v_ptr = alloc(int);
    *v_ptr = v;
    vec->data[vec->len] = (void *) v_ptr;
    vec->len++;
    __v_resize(vec);
}

int v_remove_last_int(vec_t *vec)
//@requires v_is_vector(vec);
//@requires 0 < v_length(vec);
{
    vec->len--;
    return * (int *) vec->data[vec->len + 1];
}

string v_get_string(vec_t *vec, int i)
//@requires v_is_vector(vec);
//@requires 0 <= i && i < vec->len;
//@ensures string_equal(\result, * (string *) vec->data[i]);
{
    return * (string *) v_get(vec, i);
}

void v_set_string(vec_t *vec, int i, string v)
//@requires v_is_vector(vec);
//@requires 0 <= i && i < v_length(vec);
//@ensures string_equal(v, * (string *) vec->data[i]);
{
    string *v_ptr = alloc(string);
    *v_ptr = v;
    vec->data[i] = (void *) v_ptr;
}

void v_append_string(vec_t *vec, string v)
//@requires v_is_vector(vec);
{
    string *v_ptr = alloc(string);
    *v_ptr = v;
    vec->data[vec->len] = (void *) v_ptr;
    vec->len++;
    __v_resize(vec);
}

string v_remove_last_string(vec_t *vec)
//@requires v_is_vector(vec);
//@requires 0 < v_length(vec);
{
    vec->len--;
    return * (string *) vec->data[vec->len + 1];
}

// END shorthand
